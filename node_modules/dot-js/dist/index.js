'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// object navigation
var pick = function pick(obj, path, value) {
  var size = path.length;
  for (var key in obj) {
    if (key == path[0]) {
      if (size == 1) {
        if (value !== undefined) {
          return obj[key] = value;
        } else {
          return obj[key];
        }
      }
      if (_typeof(obj[key]) == 'object') {
        return pick(obj[key], path.slice(1), value);
      }
    }
  }
};

// obtain dot notation as array
var dots = function dots(path) {
  return path.split('.');
};

// get and set
var functions = {
  get: function get(obj, path) {
    return pick(obj, dots(path));
  },
  set: function set(obj, path, value) {
    return pick(obj, dots(path), value);
  }
};

// extend Object prototype
module.exports = function () {

  Object.defineProperty(Object.prototype, 'dot', {
    enumerable: false,
    value: function value(path, _value) {
      return pick(this, dots(path), _value);
    }
  });

  return functions;
};

// dot get
module.exports.get = functions.get;

// dot set
module.exports.set = functions.set;